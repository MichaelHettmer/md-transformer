diff --git a/node_modules/@changesets/read/dist/read.cjs.dev.js b/node_modules/@changesets/read/dist/read.cjs.dev.js
index e8bd37f..e2122f4 100644
--- a/node_modules/@changesets/read/dist/read.cjs.dev.js
+++ b/node_modules/@changesets/read/dist/read.cjs.dev.js
@@ -12,9 +12,28 @@ var logger = require('@changesets/logger');
 
 function _interopDefault (e) { return e && e.__esModule ? e : { 'default': e }; }
 
-var fs__default = /*#__PURE__*/_interopDefault(fs);
+function _interopNamespace(e) {
+  if (e && e.__esModule) return e;
+  var n = Object.create(null);
+  if (e) {
+    Object.keys(e).forEach(function (k) {
+      if (k !== 'default') {
+        var d = Object.getOwnPropertyDescriptor(e, k);
+        Object.defineProperty(n, k, d.get ? d : {
+          enumerable: true,
+          get: function () { return e[k]; }
+        });
+      }
+    });
+  }
+  n["default"] = e;
+  return Object.freeze(n);
+}
+
+var fs__namespace = /*#__PURE__*/_interopNamespace(fs);
 var path__default = /*#__PURE__*/_interopDefault(path);
 var parse__default = /*#__PURE__*/_interopDefault(parse);
+var git__namespace = /*#__PURE__*/_interopNamespace(git);
 var chalk__default = /*#__PURE__*/_interopDefault(chalk);
 var pFilter__default = /*#__PURE__*/_interopDefault(pFilter);
 
@@ -38,10 +57,9 @@ function ownKeys(object, enumerableOnly) {
 
   if (Object.getOwnPropertySymbols) {
     var symbols = Object.getOwnPropertySymbols(object);
-    if (enumerableOnly) symbols = symbols.filter(function (sym) {
+    enumerableOnly && (symbols = symbols.filter(function (sym) {
       return Object.getOwnPropertyDescriptor(object, sym).enumerable;
-    });
-    keys.push.apply(keys, symbols);
+    })), keys.push.apply(keys, symbols);
   }
 
   return keys;
@@ -49,33 +67,26 @@ function ownKeys(object, enumerableOnly) {
 
 function _objectSpread2(target) {
   for (var i = 1; i < arguments.length; i++) {
-    var source = arguments[i] != null ? arguments[i] : {};
-
-    if (i % 2) {
-      ownKeys(Object(source), true).forEach(function (key) {
-        _defineProperty(target, key, source[key]);
-      });
-    } else if (Object.getOwnPropertyDescriptors) {
-      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));
-    } else {
-      ownKeys(Object(source)).forEach(function (key) {
-        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
-      });
-    }
+    var source = null != arguments[i] ? arguments[i] : {};
+    i % 2 ? ownKeys(Object(source), !0).forEach(function (key) {
+      _defineProperty(target, key, source[key]);
+    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) {
+      Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
+    });
   }
 
   return target;
 }
 
-let importantSeparator = chalk__default['default'].red("===============================IMPORTANT!===============================");
-let importantEnd = chalk__default['default'].red("----------------------------------------------------------------------");
+let importantSeparator = chalk__default["default"].red("===============================IMPORTANT!===============================");
+let importantEnd = chalk__default["default"].red("----------------------------------------------------------------------");
 
 async function getOldChangesets(changesetBase, dirs) {
   // this needs to support just not dealing with dirs that aren't set up properly
-  let changesets = await pFilter__default['default'](dirs, async (dir) => (await fs.lstat(path__default['default'].join(changesetBase, dir))).isDirectory());
+  let changesets = await pFilter__default["default"](dirs, async dir => (await fs__namespace.lstat(path__default["default"].join(changesetBase, dir))).isDirectory());
   const changesetContents = changesets.map(async changesetDir => {
-    const jsonPath = path__default['default'].join(changesetBase, changesetDir, "changes.json");
-    const [summary, json] = await Promise.all([fs.readFile(path__default['default'].join(changesetBase, changesetDir, "changes.md"), "utf-8"), fs.readJson(jsonPath)]);
+    const jsonPath = path__default["default"].join(changesetBase, changesetDir, "changes.json");
+    const [summary, json] = await Promise.all([fs__namespace.readFile(path__default["default"].join(changesetBase, changesetDir, "changes.md"), "utf-8"), fs__namespace.readJson(jsonPath)]);
     return {
       releases: json.releases,
       summary,
@@ -104,7 +115,7 @@ async function getOldChangesetsAndWarn(changesetBase, dirs) {
 }
 
 async function filterChangesetsSinceRef(changesets, changesetBase, sinceRef) {
-  const newChangesets = await git.getChangedChangesetFilesSinceRef({
+  const newChangesets = await git__namespace.getChangedChangesetFilesSinceRef({
     cwd: changesetBase,
     ref: sinceRef
   });
@@ -113,11 +124,11 @@ async function filterChangesetsSinceRef(changesets, changesetBase, sinceRef) {
 }
 
 async function getChangesets(cwd, sinceRef) {
-  let changesetBase = path__default['default'].join(cwd, ".changeset");
+  let changesetBase = path__default["default"].join(cwd, ".changeset");
   let contents;
 
   try {
-    contents = await fs__default['default'].readdir(changesetBase);
+    contents = await fs__namespace["default"].readdir(changesetBase);
   } catch (err) {
     if (err.code === "ENOENT") {
       throw new Error("There is no .changeset directory in this project");
@@ -133,12 +144,12 @@ async function getChangesets(cwd, sinceRef) {
   let oldChangesetsPromise = getOldChangesetsAndWarn(changesetBase, contents);
   let changesets = contents.filter(file => !file.startsWith(".") && file.endsWith(".md") && file !== "README.md");
   const changesetContents = changesets.map(async file => {
-    const changeset = await fs__default['default'].readFile(path__default['default'].join(changesetBase, file), "utf-8");
-    return _objectSpread2(_objectSpread2({}, parse__default['default'](changeset)), {}, {
+    const changeset = await fs__namespace["default"].readFile(path__default["default"].join(changesetBase, file), "utf-8");
+    return _objectSpread2(_objectSpread2({}, parse__default["default"](changeset)), {}, {
       id: file.replace(".md", "")
     });
   });
   return [...(await oldChangesetsPromise), ...(await Promise.all(changesetContents))];
 }
 
-exports.default = getChangesets;
+exports["default"] = getChangesets;
diff --git a/node_modules/@changesets/read/dist/read.cjs.prod.js b/node_modules/@changesets/read/dist/read.cjs.prod.js
index b947a94..d11129c 100644
--- a/node_modules/@changesets/read/dist/read.cjs.prod.js
+++ b/node_modules/@changesets/read/dist/read.cjs.prod.js
@@ -12,7 +12,23 @@ function _interopDefault(e) {
   };
 }
 
-var fs__default = _interopDefault(fs), path__default = _interopDefault(path), parse__default = _interopDefault(parse), chalk__default = _interopDefault(chalk), pFilter__default = _interopDefault(pFilter);
+function _interopNamespace(e) {
+  if (e && e.__esModule) return e;
+  var n = Object.create(null);
+  return e && Object.keys(e).forEach((function(k) {
+    if ("default" !== k) {
+      var d = Object.getOwnPropertyDescriptor(e, k);
+      Object.defineProperty(n, k, d.get ? d : {
+        enumerable: !0,
+        get: function() {
+          return e[k];
+        }
+      });
+    }
+  })), n.default = e, Object.freeze(n);
+}
+
+var fs__namespace = _interopNamespace(fs), path__default = _interopDefault(path), parse__default = _interopDefault(parse), git__namespace = _interopNamespace(git), chalk__default = _interopDefault(chalk), pFilter__default = _interopDefault(pFilter);
 
 function _defineProperty(obj, key, value) {
   return key in obj ? Object.defineProperty(obj, key, {
@@ -49,8 +65,8 @@ function _objectSpread2(target) {
 let importantSeparator = chalk__default.default.red("===============================IMPORTANT!==============================="), importantEnd = chalk__default.default.red("----------------------------------------------------------------------");
 
 async function getOldChangesets(changesetBase, dirs) {
-  const changesetContents = (await pFilter__default.default(dirs, (async dir => (await fs.lstat(path__default.default.join(changesetBase, dir))).isDirectory()))).map((async changesetDir => {
-    const jsonPath = path__default.default.join(changesetBase, changesetDir, "changes.json"), [summary, json] = await Promise.all([ fs.readFile(path__default.default.join(changesetBase, changesetDir, "changes.md"), "utf-8"), fs.readJson(jsonPath) ]);
+  const changesetContents = (await pFilter__default.default(dirs, (async dir => (await fs__namespace.lstat(path__default.default.join(changesetBase, dir))).isDirectory()))).map((async changesetDir => {
+    const jsonPath = path__default.default.join(changesetBase, changesetDir, "changes.json"), [summary, json] = await Promise.all([ fs__namespace.readFile(path__default.default.join(changesetBase, changesetDir, "changes.md"), "utf-8"), fs__namespace.readJson(jsonPath) ]);
     return {
       releases: json.releases,
       summary: summary,
@@ -69,7 +85,7 @@ async function getOldChangesetsAndWarn(changesetBase, dirs) {
 }
 
 async function filterChangesetsSinceRef(changesets, changesetBase, sinceRef) {
-  const newHashes = (await git.getChangedChangesetFilesSinceRef({
+  const newHashes = (await git__namespace.getChangedChangesetFilesSinceRef({
     cwd: changesetBase,
     ref: sinceRef
   })).map((c => c.split("/")[1]));
@@ -79,7 +95,7 @@ async function filterChangesetsSinceRef(changesets, changesetBase, sinceRef) {
 async function getChangesets(cwd, sinceRef) {
   let contents, changesetBase = path__default.default.join(cwd, ".changeset");
   try {
-    contents = await fs__default.default.readdir(changesetBase);
+    contents = await fs__namespace.default.readdir(changesetBase);
   } catch (err) {
     if ("ENOENT" === err.code) throw new Error("There is no .changeset directory in this project");
     throw err;
@@ -87,7 +103,7 @@ async function getChangesets(cwd, sinceRef) {
   void 0 !== sinceRef && (contents = await filterChangesetsSinceRef(contents, changesetBase, sinceRef));
   let oldChangesetsPromise = getOldChangesetsAndWarn(changesetBase, contents);
   const changesetContents = contents.filter((file => !file.startsWith(".") && file.endsWith(".md") && "README.md" !== file)).map((async file => {
-    const changeset = await fs__default.default.readFile(path__default.default.join(changesetBase, file), "utf-8");
+    const changeset = await fs__namespace.default.readFile(path__default.default.join(changesetBase, file), "utf-8");
     return _objectSpread2(_objectSpread2({}, parse__default.default(changeset)), {}, {
       id: file.replace(".md", "")
     });
diff --git a/node_modules/@changesets/read/dist/read.esm.js b/node_modules/@changesets/read/dist/read.esm.js
index 961666d..df420bb 100644
--- a/node_modules/@changesets/read/dist/read.esm.js
+++ b/node_modules/@changesets/read/dist/read.esm.js
@@ -1,7 +1,8 @@
-import fs, { lstat, readFile, readJson } from 'fs-extra';
+import * as fs from 'fs-extra';
+import fs__default from 'fs-extra';
 import path from 'path';
 import parse from '@changesets/parse';
-import { getChangedChangesetFilesSinceRef } from '@changesets/git';
+import * as git from '@changesets/git';
 import chalk from 'chalk';
 import pFilter from 'p-filter';
 import { warn } from '@changesets/logger';
@@ -26,10 +27,9 @@ function ownKeys(object, enumerableOnly) {
 
   if (Object.getOwnPropertySymbols) {
     var symbols = Object.getOwnPropertySymbols(object);
-    if (enumerableOnly) symbols = symbols.filter(function (sym) {
+    enumerableOnly && (symbols = symbols.filter(function (sym) {
       return Object.getOwnPropertyDescriptor(object, sym).enumerable;
-    });
-    keys.push.apply(keys, symbols);
+    })), keys.push.apply(keys, symbols);
   }
 
   return keys;
@@ -37,19 +37,12 @@ function ownKeys(object, enumerableOnly) {
 
 function _objectSpread2(target) {
   for (var i = 1; i < arguments.length; i++) {
-    var source = arguments[i] != null ? arguments[i] : {};
-
-    if (i % 2) {
-      ownKeys(Object(source), true).forEach(function (key) {
-        _defineProperty(target, key, source[key]);
-      });
-    } else if (Object.getOwnPropertyDescriptors) {
-      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));
-    } else {
-      ownKeys(Object(source)).forEach(function (key) {
-        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
-      });
-    }
+    var source = null != arguments[i] ? arguments[i] : {};
+    i % 2 ? ownKeys(Object(source), !0).forEach(function (key) {
+      _defineProperty(target, key, source[key]);
+    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) {
+      Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
+    });
   }
 
   return target;
@@ -60,10 +53,10 @@ let importantEnd = chalk.red("--------------------------------------------------
 
 async function getOldChangesets(changesetBase, dirs) {
   // this needs to support just not dealing with dirs that aren't set up properly
-  let changesets = await pFilter(dirs, async (dir) => (await lstat(path.join(changesetBase, dir))).isDirectory());
+  let changesets = await pFilter(dirs, async dir => (await fs.lstat(path.join(changesetBase, dir))).isDirectory());
   const changesetContents = changesets.map(async changesetDir => {
     const jsonPath = path.join(changesetBase, changesetDir, "changes.json");
-    const [summary, json] = await Promise.all([readFile(path.join(changesetBase, changesetDir, "changes.md"), "utf-8"), readJson(jsonPath)]);
+    const [summary, json] = await Promise.all([fs.readFile(path.join(changesetBase, changesetDir, "changes.md"), "utf-8"), fs.readJson(jsonPath)]);
     return {
       releases: json.releases,
       summary,
@@ -92,7 +85,7 @@ async function getOldChangesetsAndWarn(changesetBase, dirs) {
 }
 
 async function filterChangesetsSinceRef(changesets, changesetBase, sinceRef) {
-  const newChangesets = await getChangedChangesetFilesSinceRef({
+  const newChangesets = await git.getChangedChangesetFilesSinceRef({
     cwd: changesetBase,
     ref: sinceRef
   });
@@ -105,7 +98,7 @@ async function getChangesets(cwd, sinceRef) {
   let contents;
 
   try {
-    contents = await fs.readdir(changesetBase);
+    contents = await fs__default.readdir(changesetBase);
   } catch (err) {
     if (err.code === "ENOENT") {
       throw new Error("There is no .changeset directory in this project");
@@ -121,7 +114,7 @@ async function getChangesets(cwd, sinceRef) {
   let oldChangesetsPromise = getOldChangesetsAndWarn(changesetBase, contents);
   let changesets = contents.filter(file => !file.startsWith(".") && file.endsWith(".md") && file !== "README.md");
   const changesetContents = changesets.map(async file => {
-    const changeset = await fs.readFile(path.join(changesetBase, file), "utf-8");
+    const changeset = await fs__default.readFile(path.join(changesetBase, file), "utf-8");
     return _objectSpread2(_objectSpread2({}, parse(changeset)), {}, {
       id: file.replace(".md", "")
     });
@@ -129,4 +122,4 @@ async function getChangesets(cwd, sinceRef) {
   return [...(await oldChangesetsPromise), ...(await Promise.all(changesetContents))];
 }
 
-export default getChangesets;
+export { getChangesets as default };
